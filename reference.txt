┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  Integer Data Formats                                                                   ┃
┣━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ Operand Data Format       │ Size        │      Notes                                    │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ Bit                       │ 1 Bit       │                                               │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ Bit Field                 │ 1 - 32 Bits │ Field of Consecutive Bit                      │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ Binary-Coded Decimal (BCD)│ 8 Bits      │ Packed: 2 Digits/Byte; Unpacked: 1 Digit/Byte │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ Byte Integer              │ 8 Bits      │                                               │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ Word Integer              │ 16 Bits     │                                               │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ Long-Word Integer         │ 32 Bits     │                                               │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ Quad-Word Integer         │ 64 Bits     │ Any Two Data Registers                        │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│ 16-Byte                   │ 128 Bits    │ Memory Only, Aligned to 16-Byte Boundary      │
├───────────────────────────┼─────────────┼───────────────────────────────────────────────┤
│                           │             │                                               │
└───────────────────────────┴─────────────┴───────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃                               Single and Double Operand Operations                                              ┃
┣━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│      +          │ Arithmetic addition or postincrement indicator.                                               │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      -          │ Arithmetic subtraction or predecrement indicator.                                             │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      x          │ Arithmetic multiplication.                                                                    │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      ÷          │ Arithmetic division or conjunction symbol.                                                    │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      ~          │ Invert; operand is logically complemented.                                                    │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      ۸          │ Logical AND                                                                                   │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      ۷          │ Logical OR                                                                                    │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      ⊕          │ Logical exclusive OR                                                                          │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│      →          │ Source operand is moved to destination operand.                                               │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│     ← →         │ Two operands are exchanged.                                                                   │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│    <op>         │ Any double-operand operation.                                                                 │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│ <operand>tested │ Operand is compared to zero and the condition codes are set appropriately.                    │
├─────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────┤
│ sign-extended   │ All bits of the upper portion are made equal to the high-order bit of the lower portion.      │
├─────────────────┴───────────────────────────────────────────────────────────────────────────────────────────────┤
│                                    Other Operations                                                             │
├───────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────┤
│      TRAP         │ Equivalent to Format ÷ Offset Word → (SSP);                                                 │
│                   │ SSP - 2 → SSP;                                                                              │
│                   │ PC → (SSP);                                                                                 │
│                   │ SSP - 4 → SSP;                                                                              │
│                   │ SR → (SSP);                                                                                 │
│                   │ SSP - 2 → SSP;                                                                              │
│                   │ (Vector) → PC                                                                               │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│    STOP           │ Enter the stopped state, waiting for interrupts.                                            │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│ <operand>10       │ The operand is BCD; operations are performed in decimal.                                    │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│ if <condition>    │ Test the condition. If true, the operations after "then" are performed. If The condition is │
│ then <operations> │ false and the optional "else" clause is present, the operations after "else" are performed. │
│ else <operations> │ If the condition is false and else is omitted, the instruction performs no operation. Refer │
│                   │ to the Bcc instruction description as an example.                                           │
├───────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────┤
│                                 Register Specifications                                                         │
├──────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     An       │ Any Address Register n (example: A3 is address register 3)                                       │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   Ax, Ay     │ Source and destination address registers, respectively.                                          │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     Dc       │ Data register D7-D0, used during compare.                                                        │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   Dh, Dl     │ Data register's high- or low-order 32 bits of product.                                           │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     Dn       │ Any Data Register n (example: D5 is data register 5)                                             │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   Dr, Dq     │ Data register's remainder or quotient of divide.                                                 │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     Du       │ Data register D7-D0, used during update.                                                         │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   Dx, Dy     │ Source and destination data registers, respectively.                                             │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     MRn      │ Any Memory Register n.                                                                           │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     Rn       │ Any Address or Data Register                                                                     │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   Rx, Ry     │ Any source and destination registers, respectively.                                              │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     Xn       │ Index Register                                                                                   │
├──────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────┤
│             Data Format And Type                                                                                │
├──────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   + inf      │ Positive Infinity                                                                                │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   <fmt>      │ Operand Data Format: Byte (B), Word (W), Long (L), Single (S), Double (D), Extended (X), or      │
│              │ Packed (P).                                                                                      │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│  B, W, L     │ Specifies a signed integer data type (twos complement) of byte, word, or long word.              │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     D        │ Double-precision real data format (64 bits)                                                      │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     k        │ A twos complement signed integer (-64 to +17) specifying a number's format to be stored in the   │
│              │ packed decimal format.                                                                           │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     P        │ Packed BCD real data format (96 bits, 12 bytes).                                                 │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     S        │ Single-precision real data format (32 bits).                                                     │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│     X        │ Extended-precision real data format (96 bits, 16 bits unused.).                                  │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   -inf       │ Negative Infinity                                                                                │
├──────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────┤
│             Subfields and Qualifiers                                                                            │
├───────────────────┬─────────────────────────────────────────────────────────────────────────────────────────────┤
│ #<xxx> or #<data> │ Immediate data following the instruction word(s).                                           │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│        ( )        │ Identifies an indirect address in a register                                                │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│        [ ]        │ Identifies an indirect address in memory.                                                   │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│        bd         │ Base Displacement                                                                           │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│       ccc         │ Index into the MC68881/MC68882 Constant ROM                                                 │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│        dn         │ Displacement Value, n Bits Wide (example: d16 is a 16-bit displacement).                    │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│       LSB         │ Least Significant Bit                                                                       │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│       LSW         │ Least Significant Word                                                                      │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│       MSB         │ Most Significant Bit                                                                        │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│       MSW         │ Most Significant Word                                                                       │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│       od          │ Outer Displacement                                                                          │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│    SCALE          │ A scale factor (1, 2, 4, or 8 for no-word, word, long-word, or quad-word scaling,           │
│                   │ respectively).                                                                              │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│    SIZE           │ The index register's size (W for word, L for long word).                                    │
├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────┤
│  {offset:width}   │ Bit field selection.                                                                        │
├───────────────────┴─────────────────────────────────────────────────────────────────────────────────────────────┤
│                Register Nmes                                                                                    │
├──────────────┬──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    CCR       │ Condition Code Register (lower byte of status register)                                          │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    DFC       │ Destination Function Code Register                                                               │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    FPcr      │ Any Floating-Point System Control Register (FPCR, FPSR, or FPIAR)                                │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    FPm, FPn  │ Any Floating-Point Data Register specified as the source or destination, respectively.           │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│ IC, DC, IC/DC│ Instruction, Data, or Both Caches                                                                │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│   MMUSR      │ MMU Status Register                                                                              │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    PC        │ Program Counter                                                                                  │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    Rc        │ Any Non Floating-Point Control Register                                                          │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    SFC       │ Source Function Code Register                                                                    │
├──────────────┼──────────────────────────────────────────────────────────────────────────────────────────────────┤
│    SR        │ Status Register                                                                                  │
├──────────────┴──────────────────────────────────────────────────────────────────────────────────────────────────┤
│                Register Codes                                                                                   │
├──────────────┬───────────────────────────────────────┬──────────────────────────────────────────────────────────┘
│      *       │ General Case                          │
├──────────────┼───────────────────────────────────────┤
│      C       │ Carry Bit in CCR                      │
├──────────────┼───────────────────────────────────────┤
│     cc       │ Condition Codes from CCR              │
├──────────────┼───────────────────────────────────────┤
│     FC       │ Function code                         │
├──────────────┼───────────────────────────────────────┤
│      N       │ Negative Bit in CCR                   │
├──────────────┼───────────────────────────────────────┤
│      U       │ Undefined, Reserved for Motoroal Use. │
├──────────────┼───────────────────────────────────────┤
│      V       │ Overflow Bit in CCR                   │
├──────────────┼───────────────────────────────────────┤
│      X       │ Extend Bit in CCR                     │
├──────────────┼───────────────────────────────────────┤
│      Z       │ Zero Bit in CCR                       │
├──────────────┼───────────────────────────────────────┤
│      -       │ Not Affected or Applicable            │
├──────────────┴───────────────────────────────────────┴───────┐
│                Stack Pointers                                │
├──────────────┬───────────────────────────────────────────────┤
│     ISP      │ Supervisor/Interrupt Stack Pointer            │
├──────────────┼───────────────────────────────────────────────┤
│     MSP      │ Supervisor/Master Stack Pointer               │
├──────────────┼───────────────────────────────────────────────┤
│     SP       │ Active Stack Pointer                          │
├──────────────┼───────────────────────────────────────────────┤
│     SSP      │ Supervisor (Master or Interrupt Stack Pointer)│
├──────────────┼───────────────────────────────────────────────┤
│     USP      │ User Stack Pointer                            │
├──────────────┴───────────────────────────────────────────────┤
│                Miscellaneous                                 │
├──────────────┬───────────────────────────────────────────────┤
│    <ea>      │ Effective Address                             │
├──────────────┼───────────────────────────────────────────────┤
│   <label>    │ Assemble Program Label                        │
├──────────────┼───────────────────────────────────────────────┤
│   <list>     │ List of registers, for example D3-D0          │
├──────────────┼───────────────────────────────────────────────┤
│     LB       │ Lower Bound                                   │
├──────────────┼───────────────────────────────────────────────┤
│     m        │ Bit m of an Operand                           │
├──────────────┼───────────────────────────────────────────────┤
│     m-n      │ Bits m through n of Operand                   │
├──────────────┼───────────────────────────────────────────────┤
│     UB       │ Upper Bound                                   │
├──────────────┼───────────────────────────────────────────────┤
│              │                                               │
└──────────────┴───────────────────────────────────────────────┘

# Data Movement Instructions
The MOVE and FMOVE instructions with their associated addressing modes are the basic means of transferring and storing addresses and data. MOVE instructions transfer byte, word, and long-word operands from memory to memory, memory to register, register to memory, and register to register. MOVE instructions transfer word and long-word operands and ensure that only valid address manipulations are executed. In addition to the general MOVE instructions, there are several special data movement instructions: MOVE16, MOVEM, MOVEP, MOVEQ, EXG, LEA, PEA, LINK, and UNLK. The MOVE16 instruction is an MC68040 extension to the M68000 instruction set.
The FMOVE instructions move operands into, out of, and between floating-point data registers. FMOVE also moves operands to and from the floating-point control register (FPCR), floating-point status register (FPSR), and floating-point instruction address register (FPIAR). For operands moved into a floating-point data register, FSMOVE and FDMOVE explicitly select single- and double-precision rounding of the result, respectively. FMOVEM moves any combination of either floating-point data registers or floating-point control registers. Table 3-2 lists the general format of these integer and floating-point data movement instructions.

## Data Movement Operation Format
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Instruction     ┃ Operand Syntax      ┃ Operand Size        ┃                    Operation                                                             ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ EXG             │ Rn, Rn              │       32            │  Rn ← → Rn                                                                               │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FMOVE           │ FPm, FPn            │       X             │ Source → Destination                                                                     │
│                 │ <ea>, FPn           │ B, W, L, S, D, X, P │ Floating precision move.                                                                 │
│                 │ FPm, <ea>           │ B, W, L, S, D, X, P │                                                                                          │
│                 │ <ea>, FPcr          │       32            │                                                                                          │
│                 │ FPcr, <ea>          │       32            │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FSMOVE,         │ FPm, FPn            │       X             │ Source → Destination; round destination to single or                                     │
│ FDMOVE          │ <ea>, FPn           │ B, W, L, S, D, X    │ double precision.                                                                        │
│                 │                     │                     │ Floating precision move.                                                                 │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FMOVEM          │ <ea>, <list>        │ 32, X               │ Listed Registers → Destination                                                           │
│                 │ <ea>, Dn            │   X                 │                                                                                          │
│                 │ <list>, <ea>        │ 32, X               │ Source → Listed Registers                                                                │
│                 │ Dn, <ea>            │   X                 │                                                                                          │
│                 │                     │                     │ Move multiple                                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ LEA             │ <ea>, An            │ 16, 32              │ <ea> → An Load Effective Address                                                         │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ In short, LEA loads a pointer to the item you're                                         │
│                 │                     │                     │ addressing whereas MOV loads the actual value at that                                    │
│                 │                     │                     │ address.                                                                                 │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ lea eax, [ebp - 4] The value of ebp is subtracted by                                     │
│                 │                     │                     │ 4 and the resulting value is stored in eax. This                                         │
│                 │                     │                     │ instruction would just calculate the address and                                         │
│                 │                     │                     │ store the calculated value in the destination                                            │
│                 │                     │                     │ register. See this post for further details.                                             │
│                 │                     │                     │ https://stackoverflow.com/a/25824111/808603                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ LINK            │ An, #<d>            │  16, 32             │ SP → - 4 → SP; An → (SP); SP An, SP + D → SP                                             │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ Allocates or creates a frame in the stack for local                                      │
│                 │                     │                     │ use by the subroutine of size d bytes.                                                   │
│                 │                     │                     │ • An is an address register serving as the frame                                         │
│                 │                     │                     │   pointer (FP); A6 is used.                                                              │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ After creating the frame:                                                                │
│                 │                     │                     │ – Passed parameters are accessed with a positive                                         │
│                 │                     │                     │   displacement with respect to FP, A6                                                    │
│                 │                     │                     │   i.e MOVE.W 8(A6),D0                                                                    │
│                 │                     │                     │ – Local temporary storage variables are accessed                                         │
│                 │                     │                     │   with negative displacement with respect to A6                                          │
│                 │                     │                     │   i.e. MOVE.L D2,-10(A6)                                                                 │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVE            │ <ea>, <ea>          │ 8, 16, 32           │ Source → Destination                                                                     │
│ MOVE16          │ <ea>, <ea>          │ 16 bytes            │ Aligned 16-Byte Block → Destination                                                      │
│ MOVEA           │ <ea>, An            │ 16, 32 → 32         │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVEM           │ list, <ea>          │ 16, 32              │ Listed Registers → Destination                                                           │
│                 │ <ea>, list          │ 16, 32 → 32         │ Source → Listed Registers                                                                │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVEP           │ Dn, (d16, An)       │ 16, 32              │ Dn 31 - 24 → (An + dn); Dn 23 - 16 → (An + dn + 2);                                      │
│                 │                     │                     │ Dn 15 - 8 → (An + dn + 4); Dn 7 - 0 → (An + dn + 6)                                      │
│                 │ (d16, An), Dn       │                     │ (An + dn) → Dn 31 - 24; (An + dn + 2) → Dn 23 - 16                                       │
│                 │                     │                     │ (An + dn + 4) → Dn 15 - 8; (An + dn + 6) → Dn 7 - 0                                      │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVEQ           │ #<data>, Dn         │ 8 → 32              │ Immediate Data → Destination                                                             │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ PEA             │ <ea>                │ 32                  │ SP - 4 → SP; <ea> → (SP)                                                                 │
│                 │                     │                     │ Push Effective Address                                                                   │
│                 │                     │                     │ Its the counter part to LEA                                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ UNLK            │ An                  │ 32                  │ An → SP; (SP) → An; SP + 4 → SP                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘
NOTE: A register list includes any combination of the eight floating-point data registers or any combination of three control registers (FPCR, FPSR, and FPIAR). If a register list mask resides in a data register, only floating-point data registers may be specified.

# Integer Arithmetic Instructions
The integer arithmetic operations include four basic operations: ADD, SUB, MUL, and DIV. They also include CMP, CMPM, CMP2, CLR, and NEG. The instruction set includes ADD, CMP, and SUB instructions for both address and data operations with all operand sizes valid for data operations. Address operands consist of 16 or 32 bits. The CLR and NEG instructions apply to all sizes of data operands. Signed and unsigned MUL and DIV instructions include:
    * Word multiply to produce a long-word product.
    * Long-word multiply to produce a long-word or quad-word product.
    * Long word divided by a word divisor (word quotient and word remainder).
    * Long word or quad word divided by a long-word divisor (long-word quotient and long- word remainder).
A set of extended instructions provides multiprecision and mixed-size arithmetic: ADDX, SUBX, EXT, and NEGX. Refer to Table 3-3 for a summary of the integer arithmetic operations. In Table 3-3, X refers to the X-bit in the CCR.

┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Instruction     ┃ Operand Syntax      ┃ Operand Size        ┃                    Operation                                                             ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ ADD             │ Dn, <ea>            │ 8, 16, 32           │ Source + Destination → Destination                                                       │
│                 │ <ea>, Dn            │ 8, 16, 32           │                                                                                          │
│ ADDA            │ <ea>, An            │    16, 32           │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ ADDI            │ #<data>, <ea>       │  8, 16, 32          │ Immediate Data + Destination → Destination                                               │
│ ADDQ            │ #<data>, <ea>       │  8, 16, 32          │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ ADDX            │    Dn, Dn           │  8, 16, 32          │ Source + Destination + X → Destination                                                   │
│                 │ -(An), -(An)        │  8, 16, 32          │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CLR             │     <ea>            │  8, 16, 32          │ 0 → Destination                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CMP             │ <ea>, Dn            │  8, 16, 32          │ Destination - Source                                                                     │
│ CMPA            │ <ea>, An            │     16, 32          │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CMPI            │ #<data>, <ea>       │  8, 16, 32          │ Destination - Immediate Data                                                             │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CMPM            │ (An)+, (An)+        │  8, 16, 32          │ Destination - Source                                                                     │
│                 │                     │                     │ Compare multiple                                                                         │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CMP2            │ <ea>, Rn            │  8, 16, 32          │ Lower Bound → Rn → Upper Bound                                                           │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ DIVS/DIVU       │ <ea>, Dn            │ 32 ÷ 16 → 16, 16    │ Destination ÷ Source → Destination                                                       │
│                 │ <ea>, Dr-Dq         │ 64 ÷ 32 → 32, 32    │ (Signed or Unsigned Quotient, Remainder)                                                 │
│                 │ <ea>, Dq            │ 32 ÷ 32 → 32        │                                                                                          │
│                 │                     │                     │                                                                                          │
│ DIVSL/DIVUL     │ <ea>, Dr - Dq       │ 32 ÷ 32 → 32, 32    │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ EXT             │      Dn             │  8 → 16             │ Sign-Extended Destination → Destination                                                  │
│                 │      Dn             │  16 → 32            │                                                                                          │
│ EXTB            │      Dn             │  8 → 32             │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MULS/MULU       │ <ea>, Dn            │ 16 x 16 → 32        │ Source x Destination → Destination                                                       │
│                 │ <ea>, Dl            │ 32 x 32 → 32        │ (Signed or Unsigned)                                                                     │
│                 │ <ea>, Dh - Dl       │ 32 x 32 → 64        │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│  NEG            │ <ea>                │ 8, 16, 32           │ 0 - Destination → Destination                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│  NEGX           │ <ea>                │ 8, 16, 32           │ 0 - Destination - X → Destination                                                        │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ SUB             │ <ea>, Dn            │ 8, 16, 32           │ Destination = Source → Destination                                                       │
│                 │ Dn, <ea>            │ 8, 16, 32           │                                                                                          │
│ SUBA            │ <ea>, An            │    16, 32           │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ SUBI            │ #<data>, <ea>       │ 8, 16, 32           │ Destination - Immediate Data → Destination                                               │
│ SUBQ            │ #<data>, <ea>       │ 8, 16, 32           │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ SUBX            │  Dn, Dn             │ 8, 16, 32           │ Destination - Source - X → Destination                                                   │
│                 │  -(An), -(An)       │ 8, 16, 32           │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘

# Logical Instructions
The logical operation instructions (AND, OR, EOR, and NOT) perform logical operations with all sizes of integer data operands. A similar set of immediate instructions (ANDI, ORI, and EORI) provides these logical operations with all sizes of immediate data. Table 3-4 summarizes the logical operations.

┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Instruction     ┃ Operand Syntax      ┃ Operand Size        ┃                    Operation                                                             ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│     AND         │ <ea>, Dn            │  8, 16, 32          │ Source ۸ Destination → Destination                                                       │
│                 │ Dn, <ea>            │  8, 16, 32          │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│    ANDI         │ #<data>, <ea>       │  8, 16, 32          │ Immediate Data ۸ Destination → Destination                                               │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│    EOR          │ Dn, <ea>            │  8, 16, 32          │ Source ⊕ Destination → Destination                                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│    EORI         │ #<data>, <ea>       │  8, 16, 32          │ Immediate Data ⊕ Destination → Destination                                               │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│    NOT          │ <ea>                │  8, 16, 32          │ ~ Destination → Destination                                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│    OR           │ <ea>, Dn            │  8, 16, 32          │ Source ۷ Destination → Destination                                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│    ORI          │ #<data>, <ea>       │  8, 16, 32          │ Immediate Data ۷ Destination → Destination                                               │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘

# Shift and Rotation Instructions
The ASR, ASL, LSR, and LSL instructions provide shift operations in both directions. The ROR, ROL, ROXR, and ROXL instructions perform rotate (circular shift) operations, with and without the CCR extend bit (X-bit). All shift and rotate operations can be performed on either registers or memory.
Register shift and rotate operations shift all operand sizes. The shift count can be specified in the instruction operation word (to shift from 1 – 8 places) or in a register (modulo 64 shift count).
Memory shift and rotate operations shift word operands one bit position only. The SWAP instruction exchanges the 16-bit halves of a register. Fast byte swapping is possible by using the ROR and ROL instructions with a shift count of eight, enhancing the performance of the shift/rotate instructions. Table 3-5 is a summary of the shift and rotate operations. In Table 3-5, C and X refer to the C-bit and X- bit in the CCR.

┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Instruction     ┃ Operand Syntax      ┃ Operand Size        ┃                    Operation                                                             ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│                 │                     │                     │  Shifts off into the sign extention and carry bits of CCR                                │
│                 │ Dn, Dn              │ 8, 16, 32           │   ---      -------------                                                                 │
│  ASL            │ #<data>, Dn         │ 8, 16, 32           │  |X/C| ◀--| ◀---------- | ◀-- 0                                                          │
│                 │    <ea>             │    16               │   ---      -------------                                                                 │
│                 │                     │                     │  Arithmetic Shift Left                                                                   │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │ Shifts off into the sign extention and carry bits of CCR                                 │
│                 │                     │                     │             -------------       ---                                                      │
│                 │  Dn, Dn             │  8, 16, 32          │       ---▶ | ----------▶ | --▶ |X/C|                                                     │
│                 │  #<data>, Dn        │  8, 16, 32          │      |      -------------       ---                                                      │
│ ASR             │     <ea>            │     16              │      |      |                                                                            │
│                 │                     │                     │        -----                                                                             │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ Arithmetic Shift Right                                                                   │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │ Shifts off into the sign extention and carry bits of CCR                                 │
│                 │ Dn, Dn              │ 8, 16, 32           │   ---      -------------                                                                 │
│  LSL            │ #<data>, Dn         │ 8, 16, 32           │  |X/C| ◀--| ◀---------- | ◀-- 0                                                          │
│                 │    <ea>             │    16               │   ---      -------------                                                                 │
│                 │                     │                     │ Logical Shift Left                                                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │ Shifts off into the sign extention and carry bits of CCR                                 │
│                 │ Dn, Dn              │ 8, 16, 32           │         -------------       ---                                                          │
│  LSR            │ #<data>, Dn         │ 8, 16, 32           │  0 --▶ | ----------▶ | --▶ |X/C|                                                         │
│                 │    <ea>             │    16               │         -------------       ---                                                          │
│                 │                     │                     │ Logical Shift Right                                                                      │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │ Rotates off into the carry bit of CCR                                                    │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │           --------------------                                                           │
│                 │ Dn, Dn              │ 8, 16, 32           │   ---    |  -------------     |                                                          │
│  ROL            │ #<data>, Dn         │ 8, 16, 32           │  | C | ◀---| ◀---------- | ◀--                                                           │
│                 │    <ea>             │    16               │   ---       -------------                                                                │
│                 │                     │                     │ Rotate Left                                                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │ Rotates off into the carry bit of CCR                                                    │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │   ---------------------                                                                  │
│                 │ Dn, Dn              │ 8, 16, 32           │  |     -------------   |    ---                                                          │
│  ROR            │ #<data>, Dn         │ 8, 16, 32           │   --▶ | ----------▶ | ---▶ | C |                                                         │
│                 │    <ea>             │    16               │        -------------        ---                                                          │
│                 │                     │                     │ Rotate Right                                                                             │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │ Rotates off into the carry bit of CCR. Rotates the extended bit in.                      │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │           ------------------------------                                                 │
│                 │ Dn, Dn              │ 8, 16, 32           │   ---    |  -------------       ---     |                                                │
│  ROXL           │ #<data>, Dn         │ 8, 16, 32           │  | C | ◀---| ◀---------- | ◀-- | X | ◀--                                                 │
│                 │    <ea>             │    16               │   ---       -------------       ---                                                      │
│                 │                     │                     │ Rotate Extended Left                                                                     │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │ Rotates off into the carry bit of CCR. Roates the extended bit in.                       │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │   -------------------------------                                                        │
│                 │ Dn, Dn              │ 8, 16, 32           │  |     ---       -------------   |    ---                                                │
│  ROXR           │ #<data>, Dn         │ 8, 16, 32           │  ---▶ | X | --▶ | ----------> | ---▶ | C |                                               │
│                 │    <ea>             │    16               │        ---       -------------        ---                                                │
│                 │                     │                     │ Rotate Extended Right                                                                    │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ SWAP            │ Dn                  │   32                │                                                                                          │
│                 │                     │                     │               ----                                                                       │
│                 │                     │                     │              |    ▼                                                                      │
│                 │                     │                     │            -----------                                                                   │
│                 │                     │                     │           | MSW | LSW |                                                                  │
│                 │                     │                     │            -----------                                                                   │
│                 │                     │                     │              ▲    |                                                                      │
│                 │                     │                     │               ----                                                                       │
│                 │                     │                     │  Swaps the most significant word with the least significant word                         │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘
NOTE: X indicates the extend bit and C the carry bit in the CCR.

# Bit Manipulation Instructions
BTST, BSET, BCLR, and BCHG are bit manipulation instructions. All bit manipulation operations can be performed on either registers or memory. The bit number is specified either as immediate data or in the contents of a data register. Register operands are 32 bits long, and memory operands are 8 bits long. Table 3-6 summarizes bit manipulation operations; Z refers to the zero bit of the CCR.

                                            Bit Manipulation Operation Format
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Instruction     ┃ Operand Syntax      ┃ Operand Size        ┃                    Operation                                                             ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ BCHG            │ Dn, <ea>            │  8, 32              │ ~(<Bit Number> of Destination) → Z →                                                     │
│                 │ #<data>, <ea>       │  8, 32              │ Bit of Destination                                                                       │
│                 │                     │                     │ Bit CHanGe?                                                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BCHG            │ Dn, <ea>            │  8, 32              │ ~(<Bit Number> of Destination) → Z;                                                      │
│                 │ #<data>, <ea>       │  8, 32              │ 0 → Bit of Destination                                                                   │
│                 │                     │                     │ Bit CLeaR?                                                                               │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BSET            │ Dn, <ea>            │  8, 32              │ ~(<Bit Number> of Destination) → Z;                                                      │
│                 │ #<data>, <ea>       │  8, 32              │ 1 → Bit of Destination                                                                   │
│                 │                     │                     │ Bit SET                                                                                  │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BTST            │ Dn, <ea>            │  8, 32              │ ~(<Bit Number> of Destination) → Z                                                       │
│                 │ #<data>, <ea>       │  8, 32              │                                                                                          │
│                 │                     │                     │ Bit TeST                                                                                 │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘

# Bit Field Instructions
The M68000 family architecture supports variable-length bit field operations on fields of up to 32 bits. The BFINS instruction inserts a value into a bit field. BFEXTU and BFEXTS extract a value from the field. BFFFO finds the first set bit in a bit field. Also included are instructions analogous to the bit manipulation operations: BFTST, BFSET, BFCLR, and BFCHG. Table 3-7 summarizes bit field operations.

                                                    Bit Field Operation Format
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃ Instruction     ┃ Operand Syntax      ┃ Operand Size        ┃                    Operation                                                             ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ BFCHG           │ <ea>{offset:width}  │  1 - 32             │ ~ Field → Field                                                                          │
│                 │                     │                     │ Bit Field CHanGe                                                                         │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BFCLR           │ <ea> {offset:width} │  1 - 32             │ 0's → Field                                                                              │
│                 │                     │                     │ Bit Field CLeaR                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BFEXTS          │<ea>{offset:width},Dn│  1 - 32             │ Field → Dn; Sign-Extended                                                                │
│                 │                     │                     │ Bit Field EXTend Sign                                                                    │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BFEXTU          │<ea>{offset:width},Dn│  1 - 32             │ Field → Dn; Zero-Extended                                                                │
│                 │                     │                     │ Bit Field EXTend Unsigned                                                                │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BFFFO           │<ea>{offset:width},Dn│  1 - 32             │ Scan for First Bit Set in Field; Offset → Dn.                                            │
│                 │                     │                     │ Bit Field First Field Offset?                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BFINS           │Dn,<ea>{offset:width}│  1 - 32             │ Dn → Field                                                                               │
│                 │                     │                     │ Bit Field INSert?                                                                        │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BFSET           │ <ea>{offset,width}  │  1 - 32             │ 1's → Field                                                                              │
│                 │                     │                     │ Bit Field SET?                                                                           │
│                 │                     │                     │ Write 1's starting at some offset till width?                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BFTST           │ <ea>{offset:width}  │  1 - 32             │ Field MSB → N; ~ (OR of all Bits in Field) R → Z                                         │
│                 │                     │                     │ Bit Field TeST                                                                           │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘
NOTE: All bit field instructions set the CCR N and Z bits as shown for BFTST before performing the specified operation.

# Binary-Coded Decimal Instructions
Five instructions support operations on binary-coded decimal (BCD) numbers. The arithmetic operations on packed BCD numbers are ABCD, SBCD, and NBCD. PACK and UNPK instructions aid in the conversion of byte-encoded numeric data, such as ASCII or EBCDIC strings to BCD data and vice versa. Table 3-8 summarizes BCD operations. In Table 3- 8 X refers to the X-bit in the CCR.

                                                Binary-Coded Decimal Operation Format 
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃   Instruction   ┃    Operand Syntax   ┃    Operand Size     ┃                                     Operation                                            ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ ABCD            │ Dn, Dn              │         8           │ Source   + Destination   + X → Destination                                               │
│                 │ -(An), -(An)        │         8           │       10              10                                                                 │
│                 │                     │                     │ Add Binary-Coded Decimal                                                                 │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ NBCD            │     <ea>            │         8           │ 0 - Destination   - X → Destination                                                      │
│                 │                     │                     │                10                                                                        │
│                 │                     │                     │ Natural Binary-Coded Decimal                                                             │
│                 │                     │                     │ X is the X-bit of the CCR                                                                │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ BCD takes advantage of the fact that any one decimal numeral can be represented by a     │
│                 │                     │                     │ four bit pattern. The most obvious way of encoding digits is "natural BCD" (NBCD), where │
│                 │                     │                     │ each decimal digit is represented by its corresponding four-bit binary value, as shown   │
│                 │                     │                     │ in the following table. This is also called "8421" encoding.                             │
│                 │                     │                     │  ┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓                                                     │
│                 │                     │                     │  ┃                 ┃      BCD      ┃                                                     │
│                 │                     │                     │  ┃ Decimal digit   ┣━━━┯━━━┯━━━┯━━━┫                                                     │
│                 │                     │                     │  │                 ┃ 8 │ 4 │ 2 │ 1 ┃                                                     │
│                 │                     │                     │  ┣━━━━━━━━━━━━━━━━━╋━━━┿━━━┿━━━┿━━━┫                                                     │
│                 │                     │                     │  │       0         │ 0 │ 0 │ 0 │ 0 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       1         │ 0 │ 0 │ 0 │ 1 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       2         │ 0 │ 0 │ 1 │ 0 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       3         │ 0 │ 0 │ 1 │ 1 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       4         │ 0 │ 1 │ 0 │ 0 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       5         │ 0 │ 1 │ 0 │ 1 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       6         │ 0 │ 1 │ 1 │ 0 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       7         │ 0 │ 1 │ 1 │ 1 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       8         │ 1 │ 0 │ 0 │ 0 │                                                     │
│                 │                     │                     │  ├─────────────────┼───┼───┼───┼───┤                                                     │
│                 │                     │                     │  │       9         │ 1 │ 0 │ 0 │ 1 │                                                     │
│                 │                     │                     │  └─────────────────┴───┴───┴───┴───┘                                                     │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ Unpacked: Each numeral is encoded into one byte, with four bits representing the numeral │
│                 │                     │                     │ and the remaining bits having no significance.                                           │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ Packed: Two numerals are encoded into a single byte, with one numeral in the least       │
│                 │                     │                     │ significant nibble (bits 0 through 3) and the other numeral in the most significant      │
│                 │                     │                     │ nibble (bits 4 through 7).                                                               │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ https://en.wikipedia.org/wiki/Binary-coded_decimal                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ PACK            │ -(An), -(An) #<data>│    16 → 8           │ Unpackaged Source + Immediate Data → Packed                                              │
│                 │ Dn, Dn, #<data>     │    16 → 8           │ Destination                                                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ SBCD            │  Dn, Dn             │       8             │ Destination   - Source   - X → Destination                                               │
│                 │  -(An), -(An)       │       8             │            10         10                                                                 │
│                 │                     │                     │ Subtract Binary-Coded Decimal                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ UNPK            │ -(An), -(An) #<data>│    8 → 16           │ Packed Source → Unpacked Source                                                          │
│                 │  Dn, Dn, #<data>    │    8 → 16           │ Unpacked Source + Immediate Data → Unpacked Destination                                  │
│                 │                     │                     │                                                                                          │
│                 │                     │                     │ UNPacK                                                                                   │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘

# Program Control Instructions
A set of subroutine call and return instructions and conditional and unconditional branch instructions perform program control operations. Also included are test operand instructions (TST and FTST), which set the integer or floating-point condition codes for use by other program and system control instructions. NOP forces synchronization of the internal pipelines. Table 3-9 summarizes these instructions.

┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃   Instruction   ┃    Operand Syntax   ┃    Operand Size     ┃                                     Operation                                            ┃
┣━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│                                              Integer and Floating-Point Conditional                                                                    │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│  Bcc, FBcc      │   <label>           │   8, 16, 32         │ If Condition True, Then PC + dn → PC                                                     │
│                 │                     │                     │ Branch carry clear                                                                       │
│                 │                     │                     │ Floating Branch carry clear                                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ DBcc, FDBcc     │ Dn, <label>         │      16             │ If Condition False, Then Dn - 1 → Dn                                                     │
│                 │                     │                     │ If Dn → -1, Then _c + dn → PC                                                            │
│                 │                     │                     │  fdbcc Floating-Point Test Condition,                                                    │
│                 │                     │                     │  fdb{condition_code} Dn,<ea> Decrement, and Branch                                       │
│                 │                     │                     │ http://www.nextcomputers.org/NeXTfiles/Docs/NeXTStep/3.3/nd/Assembler/Part2_ArchSpecific/M68k_Instructions.htmld/index.html │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ Scc, FScc       │   <ea>              │      8              │ If Condition True, 1's → Destination;                                                    │
│                 │                     │                     │ Else 0's → Destination                                                                   │
│                 │                     │                     │ Set According to Condition                                                               │
├─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┤
│                                                  Unconditional                                                                                         │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ BRA             │  <label>            │  8, 16, 32          │ PC + dn → PC                                                                             │
│                 │                     │                     │ BRanch Always                                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ BSR             │ <label>             │  8, 16, 32          │ SP - 4 → SP; PC → (SP); PC + dn → PC                                                     │
│                 │                     │                     │ Branch to SubRoutine                                                                     │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ JMP             │ <ea>                │     none            │ Destination → PC                                                                         │
│                 │                     │                     │ JuMP                                                                                     │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ JSR             │ <ea>                │     none            │ SP - 4 SP; PC → (SP); Destination → PC                                                   │
│                 │                     │                     │	Jump to SubRoutine                                                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ NOP             │   none              │     none            │ PC + 2 → PC (Integer Pipeline Synchronized)                                              │
│                 │                     │                     │	No OPeration                                                                             │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FNOP            │   none              │     none            │ PC + 4 → PC (FPU Pipeline Synchronized)                                                  │
│                 │                     │                     │ Float No OPeration                                                                       │
├─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┤
│                                                  Returns                                                                                               │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ RTD             │ #<data>             │     16              │ (SP) → PC; SP + 4 + dn → SP                                                              │
│                 │                     │                     │ Return and Deallocate                                                                    │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ RTR             │ none                │  none               │ (SP) → CCR; SP + 2 → SP; (SP) → PC; SP + 4 → SP                                          │
│                 │                     │                     │ Return and Restore Condition Codes                                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ RTS             │ none                │ none                │ (SP) → PC; SP + 4 → SP                                                                   │
│                 │                     │                     │ ReTurn from Subroutine                                                                   │
├─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┤
│                                                  Test Operand                                                                                          │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ TST             │  <ea>               │  8, 16, 32          │ Set Integer Condition Codes                                                              │
│                 │                     │                     │ Test an Operand                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FTST            │ <ea>                │ B, W, L, S, D, X, P │ Set Floating-Point Condition Codes                                                       │
│                 │ FPn                 │        X            │ Test Floating-Point Operand                                                              │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘
Letters cc in the integer instruction mnemonics Bcc, DBcc, and Scc specify testing one of the following conditions:
CC — Carry clear          GE — Greater than or equal
LS — Lower or same        PL — Plus
CS — Carry set            GT — Greater than 
LT — Less than            T  — Always true*
EQ — Equal                HI — Higher
MI — Minus                VC — Overflow clear
F  — Never true*          LE — Less than or equal
NE — Not equal            VS — Overflow set

*Not applicable to the Bcc instructions.

# System Control Instructions 
Privileged and trapping instructions as well as instructions that use or modify the CCR provide system control operations. FSAVE and FRESTORE save and restore the nonuser visible portion of the FPU during context switches in a virtual memory or multitasking system. The conditional trap instructions, which use the same conditional tests as their corresponding program control instructions, allow an optional 16- or 32-bit immediate operand to be included as part of the instruction for passing parameters to the operating system. These instructions cause the processor to flush the instruction pipe. Table 3-10 summarizes these instructions. See 3.2 Integer Unit Condition Code Computation for more details on condition codes.

                                                    System Control Operation Format
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃   Instruction   ┃    Operand Syntax   ┃    Operand Size     ┃                                     Operation                                            ┃
┣━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│                                                             Privileged                                                                                 │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ANDI to SR       │ #<data>, SR         │       16            │ Immediate Data ۸ SR → SR                                                                 │
│                 │                     │                     │ AND Immediate to Status Register                                                         │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ EORI to SR      │ #<data>, SR         │       16            │ Immediate Data ⊕ SR → SR                                                                 │
│                 │                     │                     │ Exclusive-OR Immediate to Status Register                                                │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FRESTORE        │ <ea>                │    none             │ State Frame → Internal Floating-Point Registers                                          │
│                 │                     │                     │ Restore Internal Floating-Point State                                                    │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FSAVE           │ <ea>                │    none             │ Internal Floating-Point Registers → State Frame                                          │
│                 │                     │                     │ Save Internal Floating-Point State                                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVE to SR      │ <ea>, SR            │      16             │ Source → SR                                                                              │
│                 │                     │                     │ MOVE to Status Register                                                                  │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVE from SR    │ SR, <ea>            │      16             │ SR → Destination                                                                         │
│                 │                     │                     │ MOVE from Status Register                                                                │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVE USP        │ USP, An             │      32             │ USP → An                                                                                 │
│                 │ An, USP             │      32             │ An → USP                                                                                 │
│                 │                     │                     │ MOVE User Stack Pointer                                                                  │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVEC           │ Rc, Rn              │      32             │ Rc → Rn                                                                                  │
│                 │ Rn, Rc              │      32             │ Rn → Rc                                                                                  │
│                 │                     │                     │ Move Control Register                                                                    │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVES           │ Rn, <ea>            │   8, 16, 32         │ Rn → Destination Using DFC                                                               │
│                 │ <ea>, Rn            │                     │ Source Using SFC → Rn                                                                    │
│                 │                     │                     │ MOVE address Space                                                                       │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ ORI to SR       │ #<data>, SR         │      16             │ Immediate Data ۷ SR → SR                                                                 │
│                 │                     │                     │ Inclusive-OR Immediate to the Status Register                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ RESET           │ none                │ none                │ Assert Reset Output                                                                      │
│                 │                     │                     │ Reset External Devices                                                                   │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ RTE             │ none                │ none                │ (SP) → SR; SP + 2 → SP; (SP) → PC; SP + 4 → SP;                                          │
│                 │                     │                     │ Restore Stack According to format                                                        │
│                 │                     │                     │ Return from Exception                                                                    │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ STOP            │ #<data>             │       16            │ Immediate Data → SR; STOP                                                                │
│                 │                     │                     │ Load Status Register and Stop                                                            │
├─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┤
│                                                  Trap Generating                                                                                       │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ BKPT            │ #<data>             │ none                │ Run Breakpoint Cycle                                                                     │
│                 │                     │                     │ Breakpoint                                                                               │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CHK             │ <ea>, Dn            │   16, 32            │ If Dn < 0 or Dn > (<ea>), Then CHK Exception                                             │
│                 │                     │                     │ Check Register Against Bounds                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CHK2            │ <ea>, Rn            │  8, 16, 32          │ If Rn < Lower Bound or Rn > Upper Bound, Then CHK Exception                              │
│                 │                     │                     │ Check Register Against Bounds                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ ILLEGAL         │    none             │  none               │ SSP - 2 → SSP; Vector Offset → (SSP);                                                    │
│                 │                     │                     │ SSP - 4 → SSP; PC → (SSP);                                                               │
│                 │                     │                     │ SSP - 2 → SSP; SR → (SSP);                                                               │
│                 │                     │                     │ Illegal Instruction Vector Address → PC                                                  │
│                 │                     │                     │ Take Illegal Instruction Trap                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ TRAP            │ #<data>             │ none                │ SSP - 2 → SSP; Format and Vector Offset → (SSP)                                          │
│                 │                     │                     │ SSP - 4 → SSP; PC → (SSP); SSP - 2 → SSP;                                                │
│                 │                     │                     │ SR → (SSP); Vector Address → PC                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ TRAPcc          │ none                │ none                │ If cc True, Then Trap Exception                                                          │
│                 │ #<data>             │ 16, 32              │ Trap on Condition (Unsized)                                                              │
│                 │                     │                     │ TRAP carry clear                                                                         │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ FTRAPcc         │ none                │ none                │ If Floating-Point cc True, Then Trap Exception                                           │
│                 │ #<data>             │ 16, 32              │ Trap on Floating-Point condition                                                         │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ TRAPV           │ none                │ none                │ If V, Then Take Overflow Trap Exception                                                  │
│                 │                     │                     │ Trap on Overflow                                                                         │
├─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┤
│                                                  Condition Code Register                                                                               │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ ANDI to SR      │ #<data>, CCR        │       8             │ Immediate Data ۸ CCR → CCR                                                               │
│                 │                     │                     │ AND Immediate to Status Register                                                         │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ EORI to SR      │ #<data>, CCR        │       8             │ Immediate Data ⊕ CCR → CCR                                                               │
│                 │                     │                     │ Exclusive-OR Immediate to Status Register                                                │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVE to SR      │ <ea>, CCR           │      16             │ Source → CCR                                                                             │
│                 │                     │                     │ MOVE to Status Register                                                                  │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ MOVE from SR    │ CCR, <ea>           │      16             │ CCR → Destination                                                                        │
│                 │                     │                     │ MOVE from Status Register                                                                │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ ORI to SR       │ #<data>, CCR        │       8             │ Immediate Data ۷ CCR → CCR                                                               │
│                 │                     │                     │ OR Immediate to Status Register                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘
Letters cc in the TRAPcc and FTRAPcc specify testing for a condition.

# Multiprocessor Instructions
The TAS, CAS, and CAS2 instructions coordinate the operations of processors in multiprocessing systems. These instructions use read-modify-write bus cycles to ensure uninterrupted updating of memory. Coprocessor instructions control the coprocessor operations. Table 3- 12 summarizes these instructions.

                                                    Multiporcessor Operations
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃   Instruction   ┃    Operand Syntax   ┃    Operand Size     ┃                                     Operation                                            ┃
┣━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│                                                    Read-Write-Modify                                                                                   │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ CAS             │ Dc, Du, <ea>        │  8, 16, 32          │ Destination - Dc → CC                                                                    │
│                 │                     │                     │ If Z, Then Du → Destination                                                              │
│                 │                     │                     │ Else Destination → Dc                                                                    │
│                 │                     │                     │ Compare and Swap with Operand                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ CAS2            │ Dc1-Dc2, Du1-Du2,   │    16, 32           │ Dual Operand CAS                                                                         │
│                 │   (Rn)-(Rn)         │                     │ Compare and Swap with Operand                                                            │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ TAS             │     <ea>            │      8              │ Destination - 0; Set Condition Codes;                                                    │
│                 │                     │                     │ 1 → Destination [7]                                                                      │
├─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┤
│                                                       Coprocessor                                                                                      │
├─────────────────┬─────────────────────┬─────────────────────┬──────────────────────────────────────────────────────────────────────────────────────────┤
│ cpBcc           │  <label>            │    16, 32           │  If cpcc True, Then PC + dn → PC                                                         │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ cpDBcc          │  <label> Dn         │      16             │ If cpcc False, Then Dn - 1 → Dn                                                          │
│                 │                     │                     │ If Dn != -1, Then PC + dn → PC                                                           │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ cpGEN           │  User Defined       │ User Defined        │ Operand → Coprocessor                                                                    │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ cpRESTORE       │   <ea>              │    none             │ Restore Coprocessor State from <ea>                                                      │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ cpSAVE          │   <ea>              │    none             │ Sace Coprocessor State at <ea>                                                           │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ cpScc           │   <ea>              │      8              │ If cpcc True, Then 1's → Destination;                                                    │
│                 │                     │                     │ Else 0's → Destination;                                                                  │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│ cpTRAPcc        │   none              │     none            │ If cpcc True, Then TRAPcc Exception                                                      │
│                 │   #<data>           │     16, 32          │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘


# Floating-Point Arithmetic Instructions
The following paragraphs describe the floating-point instructions, organized into two categories of operation: dyadic (requiring two operands) and monadic (requiring one operand).
The dyadic floating-point instructions provide several arithmetic functions that require two input operands, such as add and subtract. For these operations, the first operand can be located in memory, an integer data register, or a floating-point data register. The second operand is always located in a floating-point data register. The results of the operation store in the register specified as the second operand. All FPU operations support all data formats. Results are rounded to either extended-, single-, or double-precision format. Table 3-14 gives the general format of dyadic instructions, and Table 3-15 lists the available operations.

                                                   Dyadic Floating-Point Operation Format 
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃   Instruction   ┃    Operand Syntax   ┃    Operand Size     ┃                                     Operation                                            ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ F<dop>          │ <ea>, FPn           │ B, W, L, S, D, X, P │ FPn <Function> Source → FPn                                                              │
│                 │ FPm, FPn            │        X            │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘
NOTE: < dop > is any one of the dyadic operation specifiers.

# Floating-Point Operations
The following paragraphs describe the floating-point instructions, organized into two categories of operation: dyadic (requiring two operands) and monadic (requiring one operand).

The dyadic floating-point instructions provide several arithmetic functions that require two input operands, such as add and subtract. For these operations, the first operand can be located in memory, an integer data register, or a floating-point data register. The second operand is always located in a floating-point data register. The results of the operation store in the register specified as the second operand. All FPU operations support all data formats. Results are rounded to either extended-, single-, or double-precision format. Table 3-14 gives the general format of dyadic instructions, and Table 3-15 lists the available operations.

                                                Dyadic Floating-Point Operations
┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃   Instruction   ┃    Operand Syntax   ┃    Operand Size     ┃                                     Operation                                            ┃
┣━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━╋━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫
│ FADD            │ <ea>, FPn           │                     │                                                                                          │
│                 │ FPn, FPn            │                     │                                                                                          │
│                 │ FPn                 │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
├─────────────────┼─────────────────────┼─────────────────────┼──────────────────────────────────────────────────────────────────────────────────────────┤
│                 │                     │                     │                                                                                          │
│                 │                     │                     │                                                                                          │
└─────────────────┴─────────────────────┴─────────────────────┴──────────────────────────────────────────────────────────────────────────────────────────┘

# Glossary
CCR: Condition Code Register
cc: carry clear
BCD: Binary-Coded Decimal
SR: status register
l: 32 bits
w: 16 bits
b: 8 bits
ATC: Address translation caches

# References
* http://68k.hax.com/
* https://en.wikibooks.org/wiki/68000_Assembly
* http://info.sonicretro.org/Redhotsonic
* http://mrjester.hapisan.com/04_MC68/ 
